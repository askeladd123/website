<!-- TODO: rewrite this ai slop --> 
---
export type ImageItem = { kind: "image"; src: string; alt?: string };
export type VideoItem = {
  kind: "video";
  sources: { src: string; type?: string }[]; // e.g. mp4, webm
  poster?: string;
};
export type MediaItem = ImageItem | VideoItem;

export interface Props {
  title: string;
  items: MediaItem[];
  href?: string;
  aspect?: string;
  autoplayActiveVideos?: boolean;
  loopVideos?: boolean;
  muted?: boolean;
}

const {
  title,
  items = [],
  href,
  aspect = "1/1",
  autoplayActiveVideos = true,
  loopVideos = true,
  muted = true,
} = Astro.props;

const compId = `ss-${Math.random().toString(36).slice(2)}`;
---

<style>
  article { display: grid; gap: var(--spacing, 0.75rem); }
  .media { position: relative; width: 100%; aspect-ratio: var(--aspect, 16/9); overflow: hidden; border-radius: var(--border-radius, 0.75rem); background: var(--card-background-color, transparent); }
  .slide { position: absolute; inset: 0; display: none; }
  .slide.is-active { display: block; }
  .slide img, .slide video { width: 100%; height: 100%; object-fit: cover; display: block; }
  .nav { position: absolute; top: 50%; inset-inline: 0; translate: 0 -50%; display: flex; justify-content: space-between; padding-inline: 0.25rem; pointer-events: none; }
  .nav button { pointer-events: auto; }
  .dots { position: absolute; inset-inline: 0; bottom: 0.5rem; display: flex; justify-content: center; gap: 0.4rem; }
  .dot { width: 0.6rem; height: 0.6rem; border-radius: 999px; border: 1px solid var(--muted-border-color, currentColor); background: transparent; padding: 0; }
  .dot.is-active { background: var(--primary, currentColor); }
  header { display: flex; align-items: center; gap: var(--spacing, 0.5rem); }
  header h2 { margin: 0; font-size: 1rem; flex: 1; }
  @media (prefers-reduced-motion: reduce) { .slide { transition: none !important; } }
</style>

<article id={compId} style={`--aspect:${aspect}`}>
  <div class="media" data-slideshow>
    {items.map((item, i) => (
      <div class={`slide${i === 0 ? " is-active" : ""}`} data-idx={i} data-kind={item.kind}>
        {item.kind === "image" ? (
          <img src={item.src} alt={item.alt} loading={i === 0 ? "eager" : "lazy"} decoding="async" />
        ) : (
          <video
            preload="none"
            playsinline
            poster={item.poster}
            { ...(loopVideos ? { loop: true } : {}) }
            { ...(muted ? { muted: true } : {}) }
            controls
          >
            {item.sources.map(s => <source src={s.src} type={s.type} />)}
          </video>
        )}
      </div>
    ))}

    {items.length > 1 && (
      <>
        <nav class="nav" aria-label="Slideshow controls">
          <button class="secondary" type="button" data-action="prev" aria-label="Previous media">‹</button>
          <button class="secondary" type="button" data-action="next" aria-label="Next media">›</button>
        </nav>
        <div class="dots" aria-label="Media navigation">
          {items.map((_, i) => (
            <button class={`dot${i === 0 ? " is-active" : ""}`} type="button" data-idx={i} aria-label={`Go to item ${i+1}`} />
          ))}
        </div>
      </>
    )}
  </div>

  <header>
    <h2>{href ? <a href={href}>{title}</a> : title}</h2>
  </header>

  <slot />
</article>

<script define:vars={{ compId, autoplayActiveVideos }}>
(() => {
  const root = document.getElementById(compId);
  if (!root) return;
  const wrap = root.querySelector("[data-slideshow]");
  const slides = Array.from(wrap.querySelectorAll(".slide"));
  const dots = Array.from(wrap.querySelectorAll(".dot"));
  const prev = wrap.querySelector("[data-action='prev']");
  const next = wrap.querySelector("[data-action='next']");
  if (!slides.length) return;

  let i = 0;

  function pauseAllVideos() {
    slides.forEach(s => {
      if (s.dataset.kind === "video") {
        const v = s.querySelector("video");
        if (v) { v.pause(); v.currentTime = v.currentTime; }
      }
    });
  }

  function activateVideosInSlide(idx) {
    const slide = slides[idx];
    if (!slide || slide.dataset.kind !== "video") return;
    const v = slide.querySelector("video");
    if (!v) return;
    if (autoplayActiveVideos) {
      const play = v.play?.();
      if (play && typeof play.then === "function") {
        play.catch(() => { /* ignore autoplay restrictions */ });
      }
    }
  }

  function show(n) {
    if (n < 0) n = slides.length - 1;
    if (n >= slides.length) n = 0;
    slides.forEach((s, idx) => s.classList.toggle("is-active", idx === n));
    dots.forEach((d, idx) => d?.classList.toggle("is-active", idx === n));
    pauseAllVideos();
    activateVideosInSlide(n);
    i = n;
  }

  prev?.addEventListener("click", () => show(i - 1));
  next?.addEventListener("click", () => show(i + 1));
  dots.forEach(d => d.addEventListener("click", () => show(Number(d.dataset.idx))));

  // Pause when component is offscreen; resume current when back.
  const io = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (!entry.isIntersecting) pauseAllVideos();
      else activateVideosInSlide(i);
    });
  }, { threshold: 0.25 });
  io.observe(wrap);

  show(0);
})();
</script>
